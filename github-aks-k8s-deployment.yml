# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login
# Ensure you set the action secret key as AZURE_CREDENTAILS in repo settings.
# Ensure you run below command to get azure_credentials as json and paste this json into secret of AZURE_CREDENTAILS. It will create role and attach it to aks.
# az ad sp create-for-rbac --name "myApp" --role contributor \
#                            --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group} \
#                           --sdk-auth
name: Build and deploy an app to AKS

on:
  push:
    branches: ["main"]
  workflow_dispatch:


env:
  AZURE_CONTAINER_REGISTRY: "registory1"
  CONTAINER_NAME: "container1"
  RESOURCE_GROUP: "Devops"
  CLUSTER_NAME: "mycluster1"
  DEPLOYMENT_MANIFEST_PATH: "regapp-deploy.yml"
  SERVICE_MANIFEST_PATH: "regapp-service.yml"
  #AZURE_CLIENT_ID: "1b60e264-7d44-4989-9c1c-22daf32c4164"
  #AZURE_TENANT_ID: "4314029f-00cf-4e3f-9247-3b3fc0f7968a"
  #AZURE_SUBSCRIPTION_ID: "074f868b-5bb3-4653-ab03-e7e76170d3f9"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:

      # Checks out the repository this file is in
      - uses: actions/checkout@v4


      #- name: Sample Azure action
        #with: # Set Azure credentials secret as an input
          #credentials: ${{ secrets.AZURE_CREDENTIALS }}
        #env: # Or as environment variables
          #AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          #AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          #AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          #client-id: ${{ secrets.AZURE_CLIENT_ID }}
          #tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          #client-id: ${{ secrets.AZURE_CLIENT_ID }}
          #tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
      # rollout added
      - name: deployment rollout
        run: |
          kubectl rollout restart deployment/regapp-deployment1111

      # Deploys application based on given manifest file
      #- name: Deploys application
       # uses: Azure/k8s-deploy@v4
       # with:
         # action: deploy
         # manifests: 
           # ${{ env.DEPLOYMENT_MANIFEST_PATH }}
            #${{ env.SERVICE_MANIFEST_PATH }}
          
         # images: |
           # ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
